Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

Show Tags


# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
          #¹¹Ôìº¯Êý
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param root, a tree node
    # @param sum, an integer
    # @return a boolean
    def hasPathSum(self, root, sum):
        self.sum=sum
        if root is None:
            return False
        return self.DFS(root,0)
    def DFS(self,node,count):
        if node:
            if (count+node.val==self.sum) and (node.left == None) and (node.right == None):
                return True
            return self.DFS(node.left,count+node.val) or self.DFS(node.right,count+node.val)
        return False
        