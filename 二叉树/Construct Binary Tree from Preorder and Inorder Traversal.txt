Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode * create(int midl,int midr,int backl,int backr,vector<int> &inorder, vector<int> &preorder)
    {
        if(midl>midr || backl >backr)
            return NULL;
        TreeNode *t=new TreeNode(preorder[backl]);
        for(int i=midl;i<=midr;i++)
        {
            if(inorder[i]==preorder[backl])
            {
                t->left=create(midl,i-1,backl+1,backl+i-midl,inorder,preorder);
                t->right=create(i+1,midr,backl+i-midl+1,backr,inorder,preorder);
            }
        }
        return t;
    }
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        return create(0,inorder.size()-1,0,preorder.size()-1,inorder,preorder);
    }
};