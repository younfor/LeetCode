Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void dfs(vector<vector<int> > &ans,vector<int> &path,TreeNode * t,int sum)
    {
        if(t)
        {
            path.push_back(t->val);
            if(t->left==NULL&&t->right==NULL&&t->val==sum)
            {
                ans.push_back(path);
                path.pop_back();
            }else
            {
                dfs(ans,path,t->left,sum-t->val);
                dfs(ans,path,t->right,sum-t->val);
                path.pop_back();
            }
        }
    }
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        vector<vector<int> > ans;
        vector<int> path;
        dfs(ans,path,root,sum);
        return ans;
    }
};